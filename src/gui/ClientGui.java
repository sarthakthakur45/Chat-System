/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.net.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
/**
 *
 * @author Sunil
 */
public class ClientGui extends javax.swing.JFrame {

    /**
     * Creates new form ClientGui
     */
    public ClientGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
        });

        jButton2.setText("Send");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel2.setPreferredSize(new java.awt.Dimension(700, 573));
        jPanel2.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 701, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 573, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 345, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jPanel1);

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("BroadCast");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            Options.check(1, this);
        } catch (IOException ex) {
            Logger.getLogger(ClientGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            Options.check(2, this);
        } catch (IOException ex) {
            Logger.getLogger(ClientGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
        try {
            Options.check(3, this);
        } catch (IOException ex) {
            Logger.getLogger(ClientGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTextField2KeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:
            Options.check(4, this);
        } catch (IOException ex) {
            Logger.getLogger(ClientGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    Socket s = new Socket("localhost",9999);
                    System.out.println("Connected");
                    BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream()));
                    BufferedReader userbr = new BufferedReader(new InputStreamReader(System.in));
                    PrintWriter pr = new PrintWriter(s.getOutputStream(),true);
                    System.out.println(br.readLine());
                    String myself = userbr.readLine();
                    ClientGui cg = new ClientGui();
                    cg.setVisible(true);
                    pr.println(myself);
                    pr.flush();
                    Listen l = new Listen(s, cg);
                    ServerInfo.soc = s;
                    ServerInfo.br = br;
                    ServerInfo.pr = pr;
                    ServerInfo.userbr = userbr;
                    ServerInfo.myself = myself;
                    System.out.println("Herllo");
                    l.start();
                    try {
                        Options.check(2,cg);  //Refresing who is online
                    } catch (IOException ex) {
                        System.out.println(ex);
                    }
	}catch(Exception e) {
		System.out.println(e);
	}
	}
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
public void addclients(ArrayList clientsstr) {
    //jPanel2
    if((!(ServerInfo.clients == null)) || !ServerInfo.clients.isEmpty()) {
        ServerInfo.clients.clear();
    }
    jPanel1.removeAll();
    int y = 0;
    System.out.println(clientsstr);
    int len = clientsstr.size();
       //jScrollPane1
       //names to hashmap with their jbutton
         ServerInfo.whotosend = (String) clientsstr.get(0);
         for(Object client:clientsstr) {
             if(ServerInfo.myself.equals(client)) {
                 continue;
             }

            javax.swing.JButton jb = new javax.swing.JButton();
            
            jb.setText((String) client);
            jb.setLocation(25,10+y*80);
            jb.setSize(200,70);
            jb.setActionCommand((String) client);
            System.out.println(client);
            jPanel1.add(jb);
            jb.setVisible(true);
            jb.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServerInfo.whotosend = evt.getActionCommand();
                ClientInfos ci = ServerInfo.clients.get(ServerInfo.whotosend);
                ci.jbdefault();
                ci.load();
                RelevantInfo.onfocus = ci;
            }
        });
            ClientInfos ci = new ClientInfos((String) client, jb, this);
            ServerInfo.clients.put((String) client,ci);
            System.out.println(jb.getMinimumSize());
            y++;
         }        
        jPanel1.revalidate();
        jPanel1.repaint();
}
}


class Listen extends Thread{
	private Socket soc;
        private ClientGui cg;
	Listen(Socket mysoc, ClientGui cg){
		this.soc = mysoc;
                this.cg = cg;
	}
	public void run() {
		try{
			BufferedReader br = new BufferedReader(new InputStreamReader(this.soc.getInputStream()));
			for(int i=0;i<100;i++) {
				String opt = br.readLine();
                                Options.inccheck(opt, cg);
				if(i == 99) {
					i = 0;
				}
			}
		}catch(Exception e) {
			System.out.println(e);
		}
	}
}



class ServerInfo {
	public static Socket soc;
	public static BufferedReader br;
	public static PrintWriter pr;
	public static BufferedReader userbr;
        public static HashMap<String,ClientInfos> clients = new HashMap<>();
        public static String myself;
        public static String whotosend;
}

class RelevantInfo {
    public static ClientInfos onfocus;
}

class ClientInfos {
    String name;
    JButton jb;
    ArrayList<String> who = new ArrayList<>();
    ArrayList<String> msgs = new ArrayList<>();
    ClientGui cg;
    ClientInfos(String name, JButton jb,ClientGui cg) {
        this.name = name;
        this.jb = jb;
        this.cg = cg;
    }
    public void addmymsg(String msg) {
        who.add("me");
        msgs.add(msg);
    }
    public void addclientmsg(String msg) {
        who.add("client");
        msgs.add(msg);
    }
    public void load() {
        cg.jPanel2.removeAll();
        cg.jPanel2.revalidate();
        cg.jPanel2.repaint();
        System.out.println(who);
        System.out.println(msgs);
        int len = who.size();
        for (int i = 0; i < len ; i++) {
            JTextField jl = new JTextField(msgs.get(i));
            int length = msgs.get(i).length();
            jl.setSize(length + 100, 40);
            if("me".equals(who.get(i))) {
                jl.setLocation(700 - length - 50,i*40);
            }
            else {
                jl.setLocation(10,i*40);
            }
            cg.jPanel2.add(jl);
            jl.setVisible(true);
        }
        cg.jPanel2.revalidate();
    }
    public void typing() {
        this.jb.setBackground(Color.red);
        try {
            Thread.sleep(50);
        } catch (InterruptedException ex) {
            Logger.getLogger(ClientInfos.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.jb.setBackground(null);
    }
    public void incomingmsg() {
        this.jb.setBackground(Color.green);
    }
    public void jbdefault() {
        this.jb.setBackground(null);
    }
}

class Options{
//	public static void printoptions() {
//		System.out.println("1.Send Message\n2.View Who is online.");
//	}
	public static void check(int opt,ClientGui cg) throws IOException {
		switch (opt) {
			case 1:ServerInfo.pr.println("Send Message");
                        System.out.println("1");
				ServerInfo.pr.println(ServerInfo.whotosend);
                                System.out.println("2");
				String msg = cg.jTextField2.getText();
                                cg.jTextField2.setText("");
				ServerInfo.pr.println(msg);
                                System.out.println("3");
                                ClientInfos ci = ServerInfo.clients.get(ServerInfo.whotosend);
                                ci.addmymsg(msg);
                                if(ci == RelevantInfo.onfocus) {
                                    ci.load();
                                }
				break;

			case 2:System.out.println("2");
			ServerInfo.pr.println("Send Who Is Online");
				break;
                        case 3:System.out.println("3");
                        ServerInfo.pr.println("Typing");
                        ServerInfo.pr.println(ServerInfo.whotosend);
                        System.out.println(ServerInfo.whotosend);
                            break;
                        case 4:System.out.println("4");
                        ServerInfo.pr.println("Broadcast");
                        String tobroadcast = cg.jTextField2.getText();
                        cg.jTextField2.setText("");
                        ServerInfo.pr.println("Hello");
                        break;
		}
	}
        public static void inccheck(String opt, ClientGui cg) throws IOException {
            System.out.println(opt + " this is inside inccheck");
            switch(opt) {
                case "Incoming Message":System.out.print("8");
                String client = ServerInfo.br.readLine();
                System.out.println("9");
                System.out.println(client+" ");
                String msg = ServerInfo.br.readLine();
                System.out.println("10");
                System.out.println("Says "+msg);
                ClientInfos ci = ServerInfo.clients.get(client);
                if(ci != null) {
                ci.addclientmsg(msg);
                if(RelevantInfo.onfocus == ci) {
                    ci.load();
                }
                else {
                ci.incomingmsg();
                toast t = new toast(client + " says" + msg, 150, 400, cg);
                t.showtoast();
                }
                }
                break;
                
                case "Sending Who Is Online":System.out.println("Inside 2ns case");
                String hashstr = ServerInfo.br.readLine();
                ArrayList<String> clients = new ArrayList<>(Arrays.asList(hashstr.split(",")));
                System.out.println(clients);
                cg.addclients(clients);
                
                break;
                
                case "Typing":System.out.println("Inside typing");
                    String whoistyping = ServerInfo.br.readLine();
                System.out.println(whoistyping);
                System.out.println(whoistyping);
                ClientInfos ci1 = ServerInfo.clients.get(whoistyping);
                System.out.println(ci1);
                if(!(ci1 == null)) {
                    ci1.typing();
                }
                System.out.println("Typing done");
                break;
                        
            }
        }
}

class toast extends JFrame { 
  
    //String of toast 
    String s; 
  
    // JWindow 
    JWindow w; 
  
    toast(String s, int x, int y, ClientGui cg) 
    { 
        this.s = s;
        w = new JWindow(); 
  
        // make the background transparent 
        w.setBackground(new Color(0, 0, 0, 0)); 
  
        // create a panel 
        JPanel p = new JPanel() { 
            public void paintComponent(Graphics g) 
            { 
                int wid = g.getFontMetrics().stringWidth(s); 
                int hei = g.getFontMetrics().getHeight(); 
                // draw the boundary of the toast and fill it 
                g.setColor(Color.black); 
                g.fillRect(10, 10, wid + 30, hei + 10); 
                g.setColor(Color.black); 
                g.drawRect(10, 10, wid + 30, hei + 10); 
  
                // set the color of text 
                g.setColor(new Color(255, 255, 255, 240)); 
                g.drawString(s, 25, 27); 
                int t = 250; 
  
                // draw the shadow of the toast 
                for (int i = 0; i < 4; i++) { 
                    t -= 60; 
                    g.setColor(new Color(0, 0, 0, t)); 
                    g.drawRect(10 - i, 10 - i, wid + 30 + i * 2, 
                               hei + 10 + i * 2); 
                } 
            } 
        }; 
  
        w.add(p); 
        Point location = cg.getLocation();
        System.out.println(cg.getLocation());
        int xdist = location.x;
        int ydist = location.y;
        w.setLocation(xdist + 950 - this.s.length(), ydist + 30); 
        w.setSize(300, 100); 
    } 
  
    // function to pop up the toast 
    void showtoast() 
    { 
        try { 
            w.setOpacity(1); 
            w.setVisible(true); 
  
            // wait for some time 
            Thread.sleep(2000); 
  
            // make the message disappear  slowly 
            for (double d = 1.0; d > 0.2; d -= 0.1) { 
                Thread.sleep(100); 
                w.setOpacity((float)d); 
            } 
  
            // set the visibility to false 
            w.setVisible(false); 
        } 
        catch (Exception e) { 
            System.out.println(e.getMessage()); 
        } 
    } 
}